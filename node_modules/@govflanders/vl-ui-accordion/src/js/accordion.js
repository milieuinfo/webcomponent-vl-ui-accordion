/**
 * Private Variables
 */
const className = `js-${vl.ns}accordion`,
  acOpenClassName = `${className}--open`,
  acToggleClassName = `${className}__toggle`,
  acToggleTextClassName = `.${acToggleClassName}__text`,
  acDisabledClassName = `${vl.ns}step--disabled`,
  acIconPlus = `${vl.ns}vi-plus`,
  acIconMin = `${vl.ns}vi-minus`,
  acContentClassName = `${vl.ns}accordion__content`,
  dataPrefix = `data-${vl.ns}`,
  acAtt = `${dataPrefix}accordion`,
  acDressedAtt = `${acAtt}-dressed`,
  acToggleAtt = `${acAtt}-toggle`;

class Accordion {
  /**
   * listener for hash in url
   * @param  {DOM element} Accordion element
   * @return {false}
   */
  _listenToHash(element) {
    if (window.location.hash && element.hasAttribute('id')) {
      if (`#${element.getAttribute('id')}` === window.location.hash) {
        this.open(element);
      }
    }
  }

  /**
   * open the accordion
   * @param  {DOM element} Accordion element
   * @return {false}
   */
  open(element) {
    if(element.hasAttribute(acToggleAtt) && !vl.util.hasClass(element, acOpenClassName)){
      element.click();
    }
  }

  /**
   * close the accordion
   * @param  {DOM element} Accordion element
   * @return {false}
   */
  close(element) {
    if(element.hasAttribute(acToggleAtt) && vl.util.hasClass(element, acOpenClassName)){
      element.click();
    }
  }

  /**
   * toggle the accordion
   * @param  {DOM element} Accordion element
   * @return {false}
   */
  toggle(element) {
    if (element.hasAttribute(acToggleAtt))
    element.click();
  }

  /**
   * dress function for the accordion functionality
   * @param  {DOM element} element
   * @return {false}
   */
  dress(element) {
    let toggle,
      accordion,
      accordionContent,
      closedText,
      openText,
      accordionId = element.getAttribute('id') || vl.util.uniqueId(),
      hiddenState = true;

    element.setAttribute(acDressedAtt, true);
    toggle = element.querySelector(acToggleTextClassName);

    accordion = element.closest(`.${className}, [${acAtt}]`);

    accordionContent = accordion.querySelector(`.${acContentClassName}`);

    if(vl.util.exists(accordionContent)) {
      accordionContent.setAttribute('aria-hidden', hiddenState);
      element.setAttribute('aria-expanded', false);
    }

    if(toggle) {
      closedText = toggle.dataset.vlAccordionCloseText;
      openText = toggle.dataset.vlAccordionOpenText;

      if(vl.util.hasClass(element, acOpenClassName)) {
        toggle.innerHTML = closedText;
      } else {
        toggle.innerHTML = openText;
      }

      toggle.setAttribute('id', accordionId);
    }

    element.addEventListener(
      'click',
      event => {
        let accordion;

        event.preventDefault();

        accordion = event.target.closest(`.${className}, [${acAtt}]`);

        if(!vl.util.hasClass(element, acDisabledClassName)) {
          hiddenState = !hiddenState;
          vl.util.toggleClass(accordion, acOpenClassName);
          element.setAttribute('aria-expanded', !hiddenState);

          let openEvent = new CustomEvent('vl.accordion.hook.onChange', {
              detail: !hiddenState,
              target: accordion
            }),
            icon = element.querySelector('.vl-vi');

          accordion.dispatchEvent(openEvent);

          if(icon && vl.util.hasClass(icon, acIconPlus)) {
            vl.util.removeClass(icon, acIconPlus);
            vl.util.addClass(icon, acIconMin);
          } else if(icon && vl.util.hasClass(icon, acIconMin)) {
            vl.util.removeClass(icon, acIconMin);
            vl.util.addClass(icon, acIconPlus);
          }

          if(vl.util.exists(accordionContent)) {
            accordionContent.setAttribute('aria-hidden', hiddenState);
          }

          if(toggle) {
            if(vl.util.hasClass(accordion, acOpenClassName)) {
              toggle.innerHTML = toggle.dataset.vlAccordionCloseText;
            } else {
              toggle.innerHTML = toggle.dataset.vlAccordionOpenText;
            }
          }
        }
      },
      false
    );

    this._listenToHash(element);

    window.addEventListener('hashchange', () => {
      this._listenToHash(element);
    });
  }

  /**
   * dressAll function for the accordion functionality
   * @return {false}
   */
  dressAll() {
    // get all accordion toggle elements
    let elements = document.querySelectorAll(`
      .${className}:not([data-vl-js-dress="false"]) .${acToggleClassName}:not([${acDressedAtt}]),
      [${acAtt}]:not([data-${vl.ns}js-dress="false"]) [${acToggleAtt}]:not([${acDressedAtt}])
    `);

    // add functionality to the accordions
    vl.util.each(elements, element => {
      this.dress(element);
    });
  }
}

if (!('accordion' in vl)) {
  vl.accordion = new Accordion();

  document.addEventListener('DOMContentLoaded', () => {
    vl.accordion.dressAll();
  });
}

export default Accordion;
